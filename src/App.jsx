import { useState } from "react";
import reactLogo from "./assets/react.svg";
import viteLogo from "/vite.svg";
import "./App.css";
import Topmenu from "./components/Topmenu";
import InfoCard from "./components/InfoCard";
import rubik2x2 from "./assets/img/rubik2x2.png";
import oll from "./assets/img/oll.jpg";
import xll from "./assets/img/xll.jpg";
import { Rubik3D } from "./components/Rubik3D";

function App() {
  const [count, setCount] = useState(0);
  const text1 = () => {
    return (
      <p>
        El m√©todo Ortega para 2x2x2 es el primer m√©todo que la mayor√≠a aprende
        luego de armarlo con Fridrich. Es muy bueno si quieres bajar tu average
        en un corto periodo de tiempo, sin embargo son pocos los que deciden
        continuar con el m√©todo una vez que han logrado batir la barrera de los
        5 segundos.<br></br>
        <br></br> El m√©todo Ortega ha ganado gran popularidad en Jap√≥n. Syuhei
        Omura, el m√°s destacado, posee actualmente el record single continental
        de Asia en la categor√≠a, ranque√°ndose 11 del mundo single y 12 del mundo
        average (al 20 de mayo de 2009).<br></br>
        <br></br> Pasos del m√©todo.
        <br></br>
        <br></br>
        Armar una cara (intuitivo).
        <br></br>
        <br></br>
        OLL (los algoritmos se expondr√°n m√°s adelante).
        <br></br>
        <br></br>XLL, PLL (los algoritmos se expondr√°n m√°s adelante).
      </p>
    );
  };

  const text2 = () => {
    return (
      <p>
        El OLL (Orientation of the Last Layer) es el √∫ltimo paso del M√©todo
        Fridrich para completar el cubo de rubik. En total, el OLL se compone de
        57 casos. Es decir, 57 algoritmos que debes aprender. Son muchos, pero
        en este art√≠culo voy a dividir todos esos casos en 14 grupos (cada grupo
        con 2-4 casos, m√°ximo 8), y cada caso tendr√° varios algoritmos para
        llevarlo a cabo.
      </p>
    );
  };

  const text3 = () => {
    return (
      <p>
        El XLL (Xcross Last Layer), Es una t√©cnica de speedcubing en la que la
        cruz de la primera capa se resuelve junto con uno o m√°s pares de la
        √∫ltima capa, lo que permite soluciones m√°s r√°pidas, Entonces, con la
        t√©cnica de la √∫ltima capa xcross, el primer paso es resolver la cruz en
        la primera capa. üòä Luego, mientras resuelves la cruz, identificas uno o
        m√°s pares que se pueden resolver en la √∫ltima capa al mismo tiempo que
        la cruz. üòÅ Luego planificas los movimientos para resolver la cruz y
        esos pares simult√°neamente. üòä Despu√©s de resolver la cruz y los pares,
        terminas resolviendo los pares restantes y la √∫ltima capa. üòÅ Todo el
        proceso le permite omitir el paso "F2L" de resolver las dos primeras
        capas, ahorrando tiempo.
      </p>
    );
  };

  return (
    <>
      <div className="cubo1">
        <Rubik3D animation={true} />
      </div>
      <div className="cubo2">
        <Rubik3D animation={true} />
      </div>
      <div style={{ zIndex: "1" }}>
        <Topmenu />
        <div className="titlePage">
          <h2>
            {/* <div className="cubo3">
              <Rubik3D animation={true} />
            </div> */}
            2x2x2<br></br>M√©todo Ortega
            {/* <div className="cubo3">
              <Rubik3D animation={true} />
            </div> */}
          </h2>
        </div>
        <InfoCard
          img={rubik2x2}
          text={text1()}
          clase={"card1"}
          animation={true}
          id={"firstPart"}
        />
        <InfoCard
          img={oll}
          text={text2()}
          clase={"card2 invert"}
          animation={false}
          id={"secondPart"}
        />
        <InfoCard
          img={xll}
          text={text3()}
          clase={"card3"}
          animation={false}
          id={"thirdPart"}
        />
        {/* <div className="cardFullImg">
          <img src={oll} alt={oll} />
        </div> */}
      </div>
    </>
  );
}

export default App;
